/**
* @Author: YuDC
* @Date: 2019-06-26 23:19
* @Description: 练习进制
 */
package main

import "fmt"

func main() {

	var i = 5
	// 二进制输出
	fmt.Printf("i = %b \n", i) // 101

	// 八进制 0~7 满8进1 以数字0开头
	var j = 011
	fmt.Printf("j = %d \n", j) // 9

	// 十六进制 0～9及A～F 满16进1 以0x或oX开头 A～F不区分大小写
	var k = 0x010
	fmt.Printf("k = %d \n", k) // 16

	// 进制转换

	// 其他进制转十进制

	// 2 -> 10
	// eg. 10011 -> 1 * 2^0 + 1 * 2^1 + 1 * 2^4 = 19
	fmt.Printf("2 -> 10: %b \n", 19) // 19

	// 8 -> 10
	// eg. 123 -> 3 * 8^0 + 2 * 8^1 + 1 * 8^2 = 83
	fmt.Printf("8 -> 10: %d \n", 0123) // 83

	// 16 -> 10
	// eg. 134 -> 4 * 16^0 + 3 * 16^1 + 1 * 16 ^2 // 308
	fmt.Printf("16 -> 10: %d \n", 0x134) // 308

	// 其他进制转二进制
	// 10 -> 2
	// eg. 10 -> 2 // 1010

	// 8 -> 2
	// eg. 013 -> 2 // 1011

	// 16 -> 2
	// eg. 0x132 -> 2 // 100110010

	// & | ^ 都是采用补码计算的

	// & 都为1才为1
	// eg. 2 & 3
	// 整数的原码，补码，反码都一样
	// 0000 0010 & 0000 0011
	// 0000 0010
	// 0000 0011
	//&0000 0010 = 2
	fmt.Println(2 & 3) // 2

	// | 有一个为1就为1
	// 0000 0010
	// 0000 0011
	//|0000 0011 = 3
	fmt.Println(2 | 3) // 3

	// ^ 只有0 1 才为 1
	// 0000 0010
	// 0000 0011
	//|0000 0001 = 1
	fmt.Println(2 ^ 3) // 1

	// 负数的反码 = 它的原码符号位不变 其他位去反
	// eg. -1 -> 1000 0001(原码) -> 1111 1110(反码)
	// 负数的补码 = 它的反码 + 1
	// eg. -1 -> 1000 0001(原码) -> 1111 1110(反码) -> 1111 1111(补码)

	// -2 -> 1000 0010(原码) -> 1111 1101(反码) -> 1111 1110(补码)
	//  3 -> 0000 0011(原码) -> 0000 0011(反码) -> 0000 0011(补码)
	// &										  0000 0010 = 2
	// |										  1111 1111(补码) -> 1111 1110(反码) -> 1000 0001(原码) = -1
	// ^										  1111 1101(补码) -> 1111 1100(反码) -> 1000 0011(原码) = -3
	fmt.Println(-2 & 3) // 2

	fmt.Println(-2 | 3) // -1

	fmt.Println(-2 ^ 3) // -3

}
